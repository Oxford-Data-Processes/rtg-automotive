name: Github Actions Pipeline

env:
  STAGE: dev
  ROLE: DevAdminRole
  AWS_ACCOUNT_ID: "654654324108"
  DOCKER_IMAGE: "process-stock-feed"
  DOCKER_BUILD_DIR: "./src/lambda/process_stock_feed"

on:
  push:
    tags:
      - "**dev-deploy-*"

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Assume AWS Role
        env:
          AWS_DEFAULT_REGION: eu-west-2
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          output=$(aws sts assume-role --role-arn arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.ROLE }} --role-session-name MySession)
          echo "AWS_ACCESS_KEY_ID=$(echo $output | jq -r .Credentials.AccessKeyId)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $output | jq -r .Credentials.SecretAccessKey)" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $output | jq -r .Credentials.SessionToken)" >> $GITHUB_ENV

      - name: Terraform Setup & Apply
        run: |
          terraform fmt -check
          terraform init -backend-config=backend/backend_config_${{ env.STAGE }}.tfvars
          terraform plan -no-color -var-file env_${{ env.STAGE }}.tfvars
          terraform apply -auto-approve -var-file env_${{ env.STAGE }}.tfvars

  docker:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Assume AWS Role
        env:
          AWS_DEFAULT_REGION: eu-west-2
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          output=$(aws sts assume-role --role-arn arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.ROLE }} --role-session-name MySession)
          echo "AWS_ACCESS_KEY_ID=$(echo $output | jq -r .Credentials.AccessKeyId)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $output | jq -r .Credentials.SecretAccessKey)" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $output | jq -r .Credentials.SessionToken)" >> $GITHUB_ENV

      - name: Build and Push Docker Image to ECR
        run: |
          echo "Logging in to ECR..."
          aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com
          if ! aws ecr describe-repositories --repository-names ${{ env.DOCKER_IMAGE }} --region eu-west-2; then
            aws ecr create-repository --repository-name ${{ env.DOCKER_IMAGE }} --region eu-west-2
          fi
          docker buildx build --platform linux/amd64 -t ${{ env.DOCKER_IMAGE }} ${{ env.DOCKER_BUILD_DIR }}
          docker tag ${{ env.DOCKER_IMAGE }}:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/${{ env.DOCKER_IMAGE }}:latest
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/${{ env.DOCKER_IMAGE }}:latest

  serverless:
    runs-on: ubuntu-latest
    needs: docker
    env:
      SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js (20.x)
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Setup Python (3.11)
        uses: actions/setup-python@v3
        with:
          python-version: 3.11

      - name: Assume AWS Role
        env:
          AWS_DEFAULT_REGION: eu-west-2
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          output=$(aws sts assume-role --role-arn arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.ROLE }} --role-session-name MySession)
          echo "AWS_ACCESS_KEY_ID=$(echo $output | jq -r .Credentials.AccessKeyId)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $output | jq -r .Credentials.SecretAccessKey)" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $output | jq -r .Credentials.SessionToken)" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID_ADMIN=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY_ADMIN=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV

      - name: Install Serverless
        run: |
          npm install -g serverless
          npm init -y
          npm install serverless-python-requirements
          serverless requirements install --stage ${{ env.STAGE }}

      - name: Deploy with Serverless
        run: |
          serverless deploy --stage ${{ env.STAGE }}