name: Github Actions Pipeline

env:
  STAGE: dev
  ROLE: DevAdminRole
  AWS_ACCOUNT_ID: "654654324108"

on:
  push:
    tags:
      - "**dev-deploy-*"

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Assume AWS Role
        env:
          AWS_DEFAULT_REGION: eu-west-2
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          output=$(aws sts assume-role --role-arn arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.ROLE }} --role-session-name MySession)
          echo "AWS_ACCESS_KEY_ID=$(echo $output | jq -r .Credentials.AccessKeyId)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $output | jq -r .Credentials.SecretAccessKey)" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $output | jq -r .Credentials.SessionToken)" >> $GITHUB_ENV

      - name: Terraform Setup & Apply
        run: |
          terraform fmt -check
          terraform init -backend-config=backend/backend_config_${{ env.STAGE }}.tfvars
          terraform plan -no-color -var-file env_${{ env.STAGE }}.tfvars
          terraform apply -auto-approve -var-file env_${{ env.STAGE }}.tfvars
          
  # docker:
  #   runs-on: ubuntu-latest
  #   needs: terraform
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Assume AWS Role
  #       env:
  #         AWS_DEFAULT_REGION: eu-west-2
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       run: |
  #         output=$(aws sts assume-role --role-arn arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.ROLE }} --role-session-name MySession)
  #         echo "AWS_ACCESS_KEY_ID=$(echo $output | jq -r .Credentials.AccessKeyId)" >> $GITHUB_ENV
  #         echo "AWS_SECRET_ACCESS_KEY=$(echo $output | jq -r .Credentials.SecretAccessKey)" >> $GITHUB_ENV
  #         echo "AWS_SESSION_TOKEN=$(echo $output | jq -r .Credentials.SessionToken)" >> $GITHUB_ENV

  #     - name: Build and Push Docker Image to ECR
  #       env:
  #         AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       run: |
  #         aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 654654324108.dkr.ecr.eu-west-2.amazonaws.com
  #         aws ecr create-repository --repository-name process-stock-feed --region eu-west-2
  #         docker build -t process-stock-feed src/lambda/process_stock_feed
  #         docker tag process-stock-feed:latest 654654324108.dkr.ecr.eu-west-2.amazonaws.com/process-stock-feed:latest
  #         docker push 654654324108.dkr.ecr.eu-west-2.amazonaws.com/process-stock-feed:latest

  serverless:
    runs-on: ubuntu-latest
    needs: terraform
    env:
      SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
      SLS_DEBUG: "*"
      AWS_DEFAULT_REGION: eu-west-2
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js (20.x)
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Setup Python (3.11)
        uses: actions/setup-python@v3
        with:
          python-version: 3.11

      - name: Deploy with Serverless
        run: |
          serverless deploy --stage ${{ env.STAGE }}